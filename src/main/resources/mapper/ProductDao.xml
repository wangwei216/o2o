<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
	namespace：必须与对应的接口全类名一致
	id:必须与对应接口的某个对应的方法名一致

 -->
    <mapper namespace="com.imooc.o2o.dao.ProductDao">



    <!--这个是先定义好的一个resultMap-->
    <resultMap id="productMap" type="com.imooc.o2o.entity.Product">
        <id column="product_id" property="productId" />
        <result column="product_name" property="productName" />
        <result column="product_desc" property="productDesc" />
        <result column="img_addr" property="imgAddr" />
        <result column="normal_price" property="normalPrice" />
        <result column="promotion_price" property="promotionPrice" />
        <result column="priority" property="priority" />
        <result column="create_time" property="createTime" />
        <result column="last_edit_time" property="lastEditTime" />
        <result column="enable_status" property="enableStatus" />
        <result column="point" property="point" />
        <association property="productCategory" column="product_category_id"
                     javaType="com.imooc.o2o.entity.ProductCategory">
            <id column="product_category_id" property="productCategoryId" />
            <result column="product_category_name" property="productCategoryName" />
            <result column="product_category_desc" property="productCategoryDesc" />
            <result column="priority" property="priority" />
            <result column="create_time" property="createTime" />
            <result column="last_edit_time" property="lastEditTime" />
        </association>
        <association property="shop" column="shop_id"
                     javaType="com.imooc.o2o.entity.Shop">
            <id column="shop_id" property="shopId" />
            <result column="owner_id" property="ownerId" />
            <result column="shop_name" property="shopName" />
            <result column="shop_desc" property="shopDesc" />
            <result column="shop_addr" property="shopAddr" />
            <result column="phone" property="phone" />
            <result column="shop_img" property="shopImg" />
            <result column="longitude" property="longitude" />
            <result column="latitude" property="latitude" />
            <result column="priority" property="priority" />
            <result column="create_time" property="createTime" />
            <result column="last_edit_time" property="lastEditTime" />
            <result column="enable_status" property="enableStatus" />
            <result column="advice" property="advice" />
        </association>
        <collection property="productImgList" column="product_id"
                    ofType="com.imooc.o2o.entity.ProductImg">
            <id column="product_img_id" property="productImgId" />
            <result column="img_addr" property="imgAddr" />
            <result column="img_desc" property="imgDesc" />
            <result column="priority" property="priority" />
            <result column="create_time" property="createTime" />
            <result column="product_id" property="productId" />
        </collection>
    </resultMap>

    <!--映射的SQL是Product实体中的插入Product信息的功能-->
        <insert id="insertProduct"
                parameterType="com.imooc.o2o.entity.Product"
                useGeneratedKeys="true">
            INSERT INTO
            tb_product(
            product_name,
            product_desc,
            img_addr,
            normal_price,
            promotion_price,
            priority,
            create_time,
            last_edit_time,
            enable_status,
            point,
            product_category_id,
            shop_id
            )
            VALUES
            (
            #{productName},
            #{productDesc},
            #{imgAddr},
            #{normalPrice},
            #{promotionPrice},
            #{priority},
            #{createTime},
            #{lastEditTime},
            #{enableStatus},
            #{productCategory.productCategoryId},
            #{shop.shopId}
            )
        </insert>

    <!--通过商品id productId来查询唯一的商品信息，返回的是商品类型信息-->
        <select id="queryProductByProductId" resultMap="productMap" parameterType="Long">
            SELECT
            p.product_id,
            p.product_name,
            p.product_desc,
            p.img_addr,
            p.normal_price,
            p.promotion_price,
            p.priority,
            p.create_time,
            p.last_edit_time,
            p.enable_status,
            p.product_category_id,
            pm.product_img_id,
            pm.img_addr AS detail_img,
            pm.img_desc,
            pm.priority,
            pm.create_time
            FROM
            tb_product p
            LEFT JOIN
            tb_product_img pm ON p.product_id = pm.product_id
            WHERE
            p.product_id=#{productId}
            ORDER BY
            pm.priority DESC

        </select>


    <!--下面这个没有使用主键自增，这个是根据传入的商品实体类去修改商品信息，返回的是int-->
    <!--  useGeneratedKeys="true" keyProperty="productId"-->
    <update id="updateProduct" parameterType="com.imooc.o2o.entity.Product">

        UPDATE tb_product
        <set>
            <if test="productName != null">product_name=#{productName},</if>
            <if test="productDesc != null">product_desc=#{productDesc},</if>
            <if test="imgAddr != null">img_addr=#{imgAddr},</if>
            <if test="normalPrice != null">normal_price=#{normalPrice},</if>
            <if test="promotionPrice != null">promotion_price=#{promotionPrice},</if>
            <if test="priority != null">priority=#{priority},</if>
            <if test="lastEditTime != null">last_edit_time=#{lastEditTime},</if>
            <if test="enableStatus != null">enable_status=#{enableStatus},</if>
            <if test="point != null">point=#{point},</if>
            <if
                    test="productCategory != null
				 and productCategory.productCategoryId != null">
                product_category_id=#{productCategory.productCategoryId}
            </if>
        </set>
        WHERE product_id = #{productId}
        AND shop_id=#{shop.shopId}
    </update>

    <!--通过商品信息的id来去删除商品的详情图片信息-->
    <delete id="deleteProductImgByProductId">
        DELETE FROM
        tb_product_img
        WHERE
        product_id=#{productId}
    </delete>

    <!--这个实现的sql功能是查询商品列表的映射-->
    <select id="queryProductList" resultMap="productMap">
        SELECT
        product_id,
        product_name,
        product_desc,
        img_addr,
        normal_price,
        promotion_price,
        priority,
        create_time,
        last_edit_time,
        enable_status,
        point,
        product_category_id,
        shop_id
        FROM
        tb_product
     <where>
            <if
                    test="productCondition.shop!=null
				 and productCondition.shop.shopId!=null">
                and shop_id = #{productCondition.shop.shopId}
            </if>
            <if
                    test="productCondition.productCategory!=null
				 and productCondition.productCategory.productCategoryId!=null">
                and product_category_id =
                #{productCondition.productCategory.productCategoryId}
            </if>
           <!-- &lt;!&ndash; 写like语句的时候 一般都会写成 like '% %' 在mybatis里面写就是应该是 like '%${name} %' 而不是
                '%#{name} %' ${name} 是不带单引号的，而#{name} 是带单引号的 &ndash;&gt;-->
            <if test="productCondition.productName!=null">
                and product_name like '%${productCondition.productName}%'
            </if>
            <if test="productCondition.enableStatus!=null">
                and enable_status = #{productCondition.enableStatus}
            </if>
        </where>
        ORDER BY
        priority DESC
        <!--这个rowIndex就是指查询数据的起始位置，pageSize是指分页规定的一共多少条数据-->
        LIMIT #{rowIndex},#{pageSize};
    </select>

        <!--这个实现的是查询商品的总数，也是为了实现分页-->
    <select id="queryProductCount" resultType="int">
        SELECT count(1) FROM tb_product
        <where>
            <if
                    test="productCondition.shop!=null
				 and productCondition.shop.shopId!=null">
                and shop_id = #{productCondition.shop.shopId}
            </if>
            <if
                    test="productCondition.productCategory!=null
				 and productCondition.productCategory.productCategoryId!=null">
                and product_category_id =
                #{productCondition.productCategory.productCategoryId}
            </if>
            <!-- 写like语句的时候 一般都会写成 like '% %' 在mybatis里面写就是应该是 like '%${name} %' 而不是
                '%#{name} %' ${name} 是不带单引号的，而#{name} 是带单引号的 -->
            <if test="productCondition.productName!=null">
                and product_name like '%${productCondition.productName}%'
            </if>
            <if test="productCondition.enableStatus!=null">
                and enable_status = #{productCondition.enableStatus}
            </if>
        </where>
    </select>


    <!--这个是删除商品类别之前，需要先讲商品类别的id置为空
    keyProperty="product_id" useGeneratedKeys="true"
    -->
    <update id="updateProductCategoryToNull" parameterType="Long">

        UPDATE tb_product
        SET
        product_category_id = null
        WHERE product_category_id =
        #{productCategoryId}
    </update>


</mapper>

